name: Build and Release Extensions

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set Xcode Path (Self-Hosted)
        if: runner.environment == 'self-hosted'
        run: |
          XCODE_PATH="/Applications/Xcode.app"
          if [ ! -d "$XCODE_PATH" ]; then
            echo "::error::Xcode not found at '$XCODE_PATH'. Please install Xcode on your self-hosted runner."
            exit 1
          fi
          echo "Using Xcode at: $XCODE_PATH"
          sudo xcode-select -s "$XCODE_PATH"

      - name: Select latest Xcode (GitHub-Hosted)
        if: runner.environment == 'github-hosted'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Verify Xcode Installation
        run: |
          echo "Verifying Xcode installation:"
          xcodebuild -version

      - name: Verify Package.resolved exists
        run: |
          if [ ! -f "Package.resolved" ]; then
            echo "::error::Package.resolved not found. Ensure it's committed to git."
            exit 1
          fi
          echo "✅ Package.resolved found"
          echo "Package.resolved hash: ${{ hashFiles('Package.resolved') }}"

      - name: Cache SwiftGodot dependencies
        uses: actions/cache@v4
        id: swiftgodot-cache
        with:
          path: |
            .build/repositories
            .build/checkouts
            .build/workspace-state.json
          key: swiftgodot-spm-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            swiftgodot-spm-${{ runner.os }}-${{ runner.arch }}-

      - name: Report Cache Status
        run: |
          if [ "${{ steps.swiftgodot-cache.outputs.cache-hit }}" = "true" ]; then
            echo "✅ SwiftGodot dependency cache HIT - skipping download"
            echo "Cache key: swiftgodot-spm-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('Package.resolved') }}"
          else
            echo "ℹ️ SwiftGodot dependency cache MISS - will download from GitHub"
            echo "Attempted key: swiftgodot-spm-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('Package.resolved') }}"
          fi

      - name: Run build script
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Cache Statistics
        if: always()
        run: |
          echo "=== Cache Directory Sizes ==="
          du -sh .build/repositories 2>/dev/null || echo "No repositories directory"
          du -sh .build/checkouts 2>/dev/null || echo "No checkouts directory"
          echo "=== Total .build size ==="
          du -sh .build/ 2>/dev/null || echo "No .build directory"

      - name: Prepare Release Package
        run: |
          mkdir -p staging/addons/ios
          mkdir -p staging/addons/macos

          echo "Copying built libraries..."
          cp -R Bin/ios/* staging/addons/ios/
          cp -R Bin/macos/* staging/addons/macos/

          echo "Creating .gdextension files..."
          
          # --- GameCenter.gdextension ---
          cat > staging/GameCenter.gdextension <<EOF
          [configuration]
          entry_symbol = "swift_entry_point"
          compatibility_minimum = "4.2"

          [libraries]
          macos.release = "res://addons/macos/libGameCenter.dylib"
          ios.release = "res://addons/ios/GameCenter.framework"
          
          [dependencies]
          macos.release = {"res://addons/macos/SwiftGodot.framework" : ""}
          ios.release = {"res://addons/ios/SwiftGodot.framework" : ""}
          EOF

          # --- Bonjour.gdextension ---
          cat > staging/Bonjour.gdextension <<EOF
          [configuration]
          entry_symbol = "swift_entry_point"
          compatibility_minimum = "4.2"
          
          [libraries]
          macos.release = "res://addons/macos/libBonjour.dylib"
          ios.release = "res://addons/ios/Bonjour.framework"

          [dependencies]
          macos.release = {"res://addons/macos/SwiftGodot.framework" : ""}
          ios.release = {"res://addons/ios/SwiftGodot.framework" : ""}
          EOF
          
          # --- Haptics.gdextension ---
          cat > staging/Haptics.gdextension <<EOF
          [configuration]
          entry_symbol = "swift_entry_point"
          compatibility_minimum = "4.2"
          
          [libraries]
          macos.release = "res://addons/macos/libHaptics.dylib"
          ios.release = "res://addons/ios/Haptics.framework"

          [dependencies]
          macos.release = {"res://addons/macos/SwiftGodot.framework" : ""}
          ios.release = {"res://addons/ios/SwiftGodot.framework" : ""}
          EOF
          
          # --- InAppPurchase.gdextension ---
          cat > staging/InAppPurchase.gdextension <<EOF
          [configuration]
          entry_symbol = "swift_entry_point"
          compatibility_minimum = "4.2"

          [libraries]
          macos.release = "res://addons/macos/libInAppPurchase.dylib"
          ios.release = "res://addons/ios/InAppPurchase.framework"

          [dependencies]
          macos.release = {"res://addons/macos/SwiftGodot.framework" : ""}
          ios.release = {"res://addons/ios/SwiftGodot.framework" : ""}
          EOF

          # --- Settings.gdextension ---
          cat > staging/Settings.gdextension <<EOF
          [configuration]
          entry_symbol = "swift_entry_point"
          compatibility_minimum = "4.2"

          [libraries]
          macos.release = "res://addons/macos/libSettings.dylib"
          ios.release = "res://addons/ios/Settings.framework"

          [dependencies]
          macos.release = {"res://addons/macos/SwiftGodot.framework" : ""}
          ios.release = {"res://addons/ios/SwiftGodot.framework" : ""}
          EOF
          
          echo "Creating ZIP archive..."
          (cd staging && zip -r ../godot-ios-extensions.zip .)

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: godot-ios-extensions.zip
