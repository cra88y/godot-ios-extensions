name: Build and Release Extensions

# This workflow runs when a new tag starting with 'v' is pushed (e.g., v1.0, v1.2.3)
on:
  push:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This is crucial: it fetches the SwiftGodot submodule
          submodules: 'recursive'

      # 2. Select the latest available Xcode version on the runner
      - name: Select latest Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      # 3. Make the build script executable and run it
      - name: Run build script
        run: |
          chmod +x build.sh
          ./build.sh

      # 4. Prepare the release package
      - name: Prepare Release Package
        run: |
          # Create a staging directory for the final package
          mkdir -p staging/addons/ios
          mkdir -p staging/addons/macos

          # Copy the compiled libraries from the Bin folder created by your script
          echo "Copying built libraries..."
          cp -R Bin/ios/* staging/addons/ios/
          cp -R Bin/macos/* staging/addons/macos/

          # Create a .gdextension file for each product, as shown in your README
          echo "Creating .gdextension files..."
          
          # --- GameCenter.gdextension ---
          cat > staging/GameCenter.gdextension <<EOF
          [configuration]
          entry_symbol = "swift_entry_point"
          compatibility_minimum = "4.2"

          [libraries]
          macos.release = "res://addons/macos/libGameCenter.dylib"
          ios.release = "res://addons/ios/GameCenter.framework"
          
          [dependencies]
          macos.release = {"res://addons/macos/libSwiftGodot.dylib" : ""}
          ios.release = {"res://addons/ios/SwiftGodot.framework" : ""}
          EOF

          # --- Bonjour.gdextension ---
          cat > staging/Bonjour.gdextension <<EOF
          [configuration]
          entry_symbol = "swift_entry_point"
          compatibility_minimum = "4.2"
          
          [libraries]
          macos.release = "res://addons/macos/libBonjour.dylib"
          ios.release = "res://addons/ios/Bonjour.framework"

          [dependencies]
          macos.release = {"res://addons/macos/libSwiftGodot.dylib" : ""}
          ios.release = {"res://addons/ios/SwiftGodot.framework" : ""}
          EOF
          
          # Add similar blocks for Haptics, InAppPurchase, and Settings...
          # For example, Haptics:
          cat > staging/Haptics.gdextension <<EOF
          [configuration]
          entry_symbol = "swift_entry_point"
          compatibility_minimum = "4.2"
          
          [libraries]
          macos.release = "res://addons/macos/libHaptics.dylib"
          ios.release = "res://addons/ios/Haptics.framework"

          [dependencies]
          macos.release = {"res://addons/macos/libSwiftGodot.dylib" : ""}
          ios.release = {"res://addons/ios/SwiftGodot.framework" : ""}
          EOF
          
          # 5. Create a zip archive of the staging folder contents
          echo "Creating ZIP archive..."
          (cd staging && zip -r ../godot-ios-extensions.zip .)

      # 6. Create a GitHub Release and upload the zip file as an asset
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # This will automatically use the tag name and commit message for the release
          generate_release_notes: true
          files: godot-ios-extensions.zip
